"""Add Phase 10 BYOK system support

Revision ID: d1f3d35c6a90
Revises: 9d54722d7080
Create Date: 2025-09-28 20:36:28.025406

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd1f3d35c6a90'
down_revision: Union[str, Sequence[str], None] = '9d54722d7080'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_verification_identifier'), table_name='verification')
    op.drop_table('verification')
    op.drop_index(op.f('idx_session_token'), table_name='session')
    op.drop_index(op.f('idx_session_userId'), table_name='session')
    op.drop_table('session')
    op.drop_index(op.f('idx_account_providerId'), table_name='account')
    op.drop_index(op.f('idx_account_userId'), table_name='account')
    op.drop_table('account')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('account',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('accountId', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('providerId', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('accessToken', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('refreshToken', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('idToken', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('accessTokenExpiresAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('refreshTokenExpiresAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('scope', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('account_pkey'))
    )
    op.create_index(op.f('idx_account_userId'), 'account', ['userId'], unique=False)
    op.create_index(op.f('idx_account_providerId'), 'account', ['providerId'], unique=False)
    op.create_table('session',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('userId', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('expiresAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('ipAddress', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('userAgent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('session_pkey')),
    sa.UniqueConstraint('token', name=op.f('session_token_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_session_userId'), 'session', ['userId'], unique=False)
    op.create_index(op.f('idx_session_token'), 'session', ['token'], unique=False)
    op.create_table('verification',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('identifier', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('expiresAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('verification_pkey'))
    )
    op.create_index(op.f('idx_verification_identifier'), 'verification', ['identifier'], unique=False)
    # ### end Alembic commands ###
